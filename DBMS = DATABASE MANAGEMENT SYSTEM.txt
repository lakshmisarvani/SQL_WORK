DBMS => DATABASE MANAGEMENT SYSTEM

===========================================

DBMS = ?

A software which is used to manage data in a database


Database = ?
A Database is a collection of organized data that allows easy access, management, and updating.



Difference between relational DB(SQL) and NoSQL

SQL=> Structured Query Language
NoSQL => No Structured Query Language

JSON => JavaScript Object Notation

| Concept         | SQL (Relational DB) | NoSQL (e.g., MongoDB)  |
| --------------- | ------------------- | ---------------------- |
| Data Storage    | **Tables**          | **Collections**        |
| A single record | **Row / Tuple**     | **Document (JSON)**    |
| Column          | **Attribute**       | **Field / Key**        |
| Query Language  | SQL                 | MongoDB Query Language |


Difference between file system and dbms


| 🔹 Feature                | 🗂️ File System                 | 🗄️ DBMS (Database Management System)                   |
| ------------------------- | ------------------------------- | ------------------------------------------------------- |
| **Basics**                | Arranges files in storage       | Software to manage databases                            |
| **Data Redundancy**       | High — duplicate data can exist | Low — redundancy is minimized                           |
| **Backup & Recovery**     | No in-built backup or recovery  | Has built-in tools for backup and recovery              |
| **Query Processing**      | No efficient query mechanism    | Efficient query processing using SQL                    |
| **Complexity**            | Simple to use and implement     | More complex due to advanced features                   |
| **Security**              | Less secure                     | High security (user roles, access control, etc.)        |
| **Cost**                  | Less expensive                  | More costly due to tools and support                    |
| **Data Independence**     | Not supported                   | Supported (Logical & Physical Data Independence)        |
| **Data Abstraction**      | Shows how data is stored        | Hides storage details from users                        |
| **Integrity Constraints** | Difficult to enforce            | Easy to define and enforce (e.g., primary/foreign keys) |



Applications of DBMS
====================
Banking and Finance Sector,University,Airlines,Sales, accounting, human resources, Manufacturing, online retailers.,Telecommunication (post,pre-paid bill maintenance)


Types of DBMS => Hierarchial, Network, Relational, NoSQL, Object-oriented 


| Type               | Structure         | Example        | Key Feature                 |
| ------------------ | ----------------- | -------------- | --------------------------- |
| Hierarchical       | Tree              | IBM IMS        | Parent-child relationship   |
| Network            | Graph             | IDMS           | Multiple parent-child links |
| Relational (RDBMS) | Table (Row/Col)   | MySQL, Oracle  | SQL-based, normalized data  |
| Object-Oriented    | Objects           | db4o, ObjectDB | Integrates OOP with DB      |
| NoSQL              | Varies (JSON, KV) | MongoDB, Redis | Schema-less, scalable       |

Normalisation:This process involves breaking down large tables into smaller, well-structured ones and defining relationships between them. This reduces the chance of storing the duplicate data and improves the efficiency of database.

Advantages,Disadvantages of DBMS

| 🟢 **Advantages**                      | 🔴 **Disadvantages**                     |
| --------------------------------------- | ---------------------------------------- |
| Removes duplicate data                  | Setup is costly                          |
| Keeps data accurate and consistent      | Needs skilled people to manage           |
| Recovers data if lost                   | Slower for small tasks                   |
| Gives better data security              | Complex to design and maintain           |
| Many users can access at once           | Can face locking or deadlock issues      |
| Easy to search and update data          | Needs a lot of memory and storage        |
| Allows safe data sharing                | More rules mean more planning            |
| Changes in storage don’t break programs | Harder for beginners to understand fully |


=========================================================================
Database terminologies =>  Data, Information, Metadata, Schema, Instance
=========================================================================

| 🔹 Term         | 📝 Short Definition     | 🧾 Example                    |
| --------------- | ------------------------ | ----------------------------- |
| **Data**        | Raw facts                | `21`, `Sarvani`               |
| **Information** | Meaningful data          | "Sarvani is 21 years old"     |
| **Metadata**    | Info about data format   | "Age is number, Name is text" |
| **Schema**      | Table structure/design   | `Students(ID, Name, Age)`     |
| **Instance**    | Actual data in the table | `(101, Sarvani, 21)`          |


Table => Schema + Instance

================================
Tables, Tuples, Attributes, Keys
================================


Tables:
A table is a collection of related data in an organized manner in the form of rows and columns. It is an organized arrangement of data and information in tabular form containing rows and columns, making it easier to understand and compare data.


Tuple:
A tuple, also known as a record or row, is a basic unit of data in a relational database management system (DBMS). A tuple represents a single instance of a relation, or table, in the database. Each tuple contains a set of values, or attributes, that correspond to the columns, or fields, of the relation. 



Attributes:

| 🔹 Attribute Type   | 📝 Meaning (Short)               | 🧾 Student Example                         |
| ---------------------|----------------------------------|---------------------------- |
| **1. Simple**        | Cannot be split further          | `Age = 21`                                 |
| **2. Composite**     | Can be divided into sub-parts    | `Name = {FirstName: Sarvani, LastName: R}` |
| **3. Single Valued** | Has only one value               | `Email = sarvani@example.com`              |
| **4. Multivalued**   | Has multiple values              | `Phone Numbers = {9876, 9988}`             |
| **5. Key**           | Uniquely identifies the student  | `StudentID = 101`                          |
| **6. Derived**       | Calculated from stored data      | `Age` from `Date of Birth = 2003-06-10`    |
| **7. Stored**        | Directly saved in database       | `Date of Birth = 2003-06-10`               |
| **8. Complex**       | Composite + Multivalued together | `Address = {Flat No, Street, Cities}`      |



Keys:

🔑 Types of Keys in DBMS (with Student Example)
1. Primary Key => UNIQUE KEY + NOT NULL
Definition: A column (or group of columns) that uniquely identifies each record in a table.

Rule: Cannot be null, cannot have duplicates.

Student Example:
StudentID — Every student has a unique ID.

sql
PRIMARY KEY → StudentID

2. Candidate Key
Definition: All possible columns that can be a primary key (i.e., unique and not null).

Student Example:
StudentID
AadharNumber
Both can uniquely identify a student → both are candidate keys.

We choose one as the primary key.

3. Super Key
Definition: A column or a group of columns that uniquely identifies a row.

Includes candidate keys and extra attributes.

Student Example:
StudentID
StudentID + Name → still unique (extra info = super key)

4. Foreign Key
Definition: A column that refers to the primary key of another table.

Used to connect tables.

Student Example:
In a Marks table: StudentID is a foreign key from the Students table.

sql
FOREIGN KEY → StudentID (in Marks table) → refers to Students(StudentID)

5. Alternate Key
Definition: A candidate key that is not chosen as the primary key.

Student Example:
Candidate Keys: StudentID, AadharNumber

If StudentID is Primary → AadharNumber becomes Alternate Key

6. Composite Key
Definition: A key made of 2 or more columns together that uniquely identify a row.

Student Example:

In a CourseRegistration table, you might use:

sql
Composite Key = {StudentID, CourseID}
A student can register for many courses, but the combination is unique.

7. Unique Key
Definition: Like primary key but allows one null value.

Student Example:
Email should be unique for every student, but one student might not provide it.

sql
UNIQUE → Email



Student Table Example 

📘 Student Table 
StudentID	Email	AadharNumber	Phone	Name	CourseID
101	sarvani@gmail.com	1234-5678-9012	9876543210	Sarvani	CSE101
102	rahul@gmail.com	2234-5678-9012	9123456789	Rahul	CSE102
103	anita@gmail.com	3234-5678-9012	9988776655	Anita	CSE101


| 🔹 Key Type        | ✅ Example                            | 📘 Short Explanation                          |
| ------------------ | ------------------------------------ | --------------------------------------------- |
| **Primary Key**    | `{StudentID}`                        | Uniquely identifies each student              |
| **Candidate Keys** | `{StudentID}`, `{Email}`, `{Aadhar}` | All are unique, any can be primary            |
| **Alternate Keys** | `{Email}`, `{Aadhar}`                | Not chosen as primary from candidate keys     |
| **Super Keys**     | `{StudentID}`, `{StudentID, Name}`   | Unique keys + extra columns                   |
| **Composite Key**  | `{StudentID, CourseID}`              | Combined key for unique pair in another table |
| **Unique Key**     | `{Email}`, `{Phone}`                 | Unique values, allows one null                |
| **Foreign Key**    | `{CourseID}`                         | Links to another table (Courses)              |



What is Data Independence in DBMS?
Data independence is a property of a database management system by which we can change the database schema at one level of the database system without changing the database schema at the next higher level.


Types of Data Independence => Logical,Physical

=========================
Logical Data Independence
=========================
Changing the logical schema (conceptual level) without changing the external schema (view level) is called logical data independence.
It is used to keep the external schema separate from the logical schema.

For example, it is possible to add or delete new entities, attributes to the conceptual schema without making any changes to the external schema.



==========================
Physical Data Independence
==========================

Making changes to the physical schema without changing the logical schema is called physical data independence.
If we change the storage size of the database system server, it will not affect the conceptual structure of the database.
Example – Changing the location of the database from C drive to D drive.



What is DBMS architecture?

DBMS architecture is the design structure that defines how data is stored, managed, and accessed in a database system. It organizes the database into layers or tiers to ensure efficient data processing, better scalability, and easier management.

| Architecture | Layers            | Example                                       |
| ------------ | ----------------- | --------------------------------------------- |
| **1-Tier**   | All-in-one        | MS Access, Excel with DB                      |
| **2-Tier**   | Client + DB       | Desktop app talking to DB directly            |
| **3-Tier**   | Client + App + DB | Web app (React) → Backend (Node) → DB (MySQL) |



What is tier 1 and tier 2 and tier 3 architecture?
Tier 1 (Single-Tier Architecture): The database and application are on the same system.
Tier 2 (Two-Tier Architecture): The application and database are separate, directly connected via a network.
Tier 3 (Three-Tier Architecture): Divides into three parts: user interface, logic and database, all working together.



What are the levels of DBMS?

The levels of DBMS are Internal Level, Conceptual level, External Level

Internal Level: Deals with how data is physically stored in the database.
Conceptual Level: Focuses on the structure of the entire database and how data is organized.
External Level: Shows the database to users in a way that suits their needs, such as views or reports.


Architecture:


| Architecture | Layers            | Example                                       |
| ------------ | ----------------- | --------------------------------------------- |
| **1-Tier**   | All-in-one        | MS Access, Excel with DB                      |
| **2-Tier**   | Client + DB       | Desktop app talking to DB directly            |
| **3-Tier**   | Client + App + DB | Web app (React) → Backend (Node) → DB (MySQL) |


===================
1-tier architecture
===================
| 🔹 Tier          | 💡 What Happens                                                    |
| ---------------- | ------------------------------------------------------------------- |
| **Single Layer** | Everything runs on the same machine — the application, interface, and `                                                                                  database. |


===================
2-tier architecture
===================

| 🔹 Tier           | 💡 What Happens                    |
| ----------------- | ----------------------------------- |
| **Client Tier**   | Student app sends request to server |
| **Database Tier** | Server responds with data           


===================
3-tier architecture
===================
| 🔹 Tier              | 💡 What Happens                      |
| -------------------- | ------------------------------------- |
| **Client Tier**      | Student uses a browser/app (frontend) |
| **Application Tier** | Handles logic (backend server/API)    |
| **Database Tier**    | Stores actual data                    |




ER- ENTITY RELATIONSHIP MODEL :
The Entity-Relationship Model (ER Model) is a conceptual model for designing a databases. This model represents the logical structure of a database, including entities, their attributes and relationships between them.

ENTITY
RELATIONSHIP
ATTRIBUTE

Entity: An objects that is stored as data such as Student, Course or Company.
Attribute: Properties that describes an entity such as StudentID, CourseName, or EmployeeEmail.
Relationship: A connection between entities such as "a Student enrolls in a Course".


Entity Set:
An entity refers to an individual object of an entity type, and the collection of all entities of a particular type is called an entity set. 

Two types of Entity = > Strong entity  , Weak Entity


Strong entity: A Strong Entity is a type of entity that has a key Attribute that can uniquely identify each instance of the entity. A Strong Entity does not depend on any other Entity in the Schema for its identification. It has a primary key that ensures its uniqueness and is represented by a rectangle in an ER diagram.


Weak entity: 
A Weak Entity cannot be uniquely identified by its own attributes alone. It depends on a strong entity to be identified. A weak entity is associated with an identifying entity (strong entity), which helps in its identification. A weak entity are represented by a double rectangle. The participation of weak entity types is always total. The relationship between the weak entity type and its identifying strong entity type is called identifying relationship and it is represented by a double diamond.



Degree of relationship set: The number of different entity sets participating in a relationship set is called the degree of a relationship set.

1. Unary Relationship: When there is only ONE entity set participating in a relation, the relationship is called a unary relationship. For example, one person is married to only one person.

2. Binary Relationship: When there are TWO entities set participating in a relationship, the relationship is called a binary relationship. For example, a Student is enrolled in a Course.

3. Ternary Relationship: When there are three entity sets participating in a relationship, the relationship is called a ternary relationship.


Cardinality in ER Model:The maximum number of times an entity of an entity set participates in a relationship set is known as cardinality.

Cardinality can be of different types:
1. One-to-One
When each entity in each entity set can take part only once in the relationship, the cardinality is one-to-one. Let us assume that a male can marry one female and a female can marry one male. So the relationship will be one-to-one.

2. One-to-Many
In one-to-many mapping as well where each entity can be related to more than one entity. Let us assume that one surgeon department can accommodate many doctors. So the Cardinality will be 1 to M. It means one department has many Doctors.

3. Many-to-One
When entities in one entity set can take part only once in the relationship set and entities in other entity sets can take part more than once in the relationship set, cardinality is many to one.

Let us assume that a student can take only one course but one course can be taken by many students. So the cardinality will be n to 1. It means that for one course there can be n students but for one student, there will be only one course.


4. Many-to-Many
When entities in all entity sets can take part more than once in the relationship cardinality is many to many. Let us assume that a student can take more than one course and one course can be taken by many students. So the relationship will be many to many.


Participation Constraint: Participation Constraint is applied to the entity participating in the relationship set.

1. Total Participation: Each entity in the entity set must participate in the relationship. If each student must enroll in a course, the participation of students will be total. Total participation is shown by a double line in the ER diagram.

2. Partial Participation: The entity in the entity set may or may NOT participate in the relationship. If some courses are not enrolled by any of the students, the participation in the course will be partial.





Partial Dependency : A partial dependency occurs when: A non-key attribute depends on part of a composite primary key, not the whole key.


Functional Dependency: A functional dependency (FD) exists when the value of one attribute uniquely determines the value of another attribute.
Notation:
If A → B, it means:
If you know A, you can uniquely determine B.
✅ Example:
| StudentID | Name  |
| --------- | ----- |
| 1         | Alice |
| 2         | Bob   |

StudentID → Name
➡ Because for each unique StudentID, there is only one Name.


🔹 Transitive Dependency: A transitive dependency exists when:
A → B and B → C
Then A → C is a transitive dependency.

In a table:
A non-key attribute depends on another non-key attribute, which depends on the primary key.

❌ Example of Transitive Dependency (Violates 3NF):
| EmpID | DeptID | DeptName |
| ----- | ------ | -------- |
| 101   | D1     | Sales    |
FDs:

EmpID → DeptID (EmpID is primary key)

DeptID → DeptName
So: EmpID → DeptName ⛔ (Transitive dependency)

✅ Fix it (Normalize to 3NF):

Employee table:
| EmpID | DeptID |
| ----- | ------ |
| 101   | D1     |

Department table:
| DeptID | DeptName |
| ------ | -------- |
| D1     | Sales    |

Now,there's no transitive dependency

| Concept               | Definition                                                        | Example                   |
| --------------------- | ----------------------------------------------------------------- | ------------------------- |
| Functional Dependency | Attribute A determines B (A → B)                                  | StudentID → Name          |
| Transitive Dependency | A → B and B → C, then A → C (indirect dependency through another) | EmpID → DeptID → DeptName |


🔸 1st Normal Form (1NF)
📘 Definition:
A table is in 1NF if:
All attributes contain only atomic (indivisible) values
There are no repeating groups or arrays

✅ 1NF - Satisfied Example:
| StudentID | Name  | Course  |
| --------- | ----- | ------- |
| 1         | Alice | Math    |
| 2         | Bob   | English |

❌ 1NF - Violation Example: ➡ Violation Reason: "Courses" contains multiple values (not atomic)
| StudentID | Name  | Courses          |
| --------- | ----- | ---------------- |
| 1         | Alice | Math, Science    |
| 2         | Bob   | English, History |


🔸 2nd Normal Form (2NF)
📘 Definition:
A table is in 2NF if:
It is already in 1NF
All non-prime attributes are fully functionally dependent on the whole primary key (i.e., No Partial Dependency)

✅ 2NF - Satisfied Example:
StudentCourse Table:
| StudentID | Course  | Grade |
| --------- | ------- | ----- |
| 1         | Math    | A     |
| 1         | Science | B     |

 Composite Key: (StudentID, Course) → Grade

❌ 2NF - Violation Example:
| StudentID | Course  | Name  | Grade |
| --------- | ------- | ----- | ----- |
| 1         | Math    | Alice | A     |
| 1         | Science | Alice | B     |
➡ Violation Reason: "Name" depends only on StudentID, not on full key (StudentID, Course) → Partial Dependency

🔸 3rd Normal Form (3NF)
📘 Definition:
A table is in 3NF if:
It is in 2NF
There is no transitive dependency:

Non-prime attribute → another non-prime attribute → primary key

✅ 3NF - Satisfied Example:
| StudentID | Name  | DeptID |
| --------- | ----- | ------ |
| 1         | Alice | D1     |

| DeptID | DeptName |
| ------ | -------- |
| D1     | CS       |


❌ 3NF - Violation Example:
| StudentID | Name  | DeptName |
| --------- | ----- | -------- |
| 1         | Alice | CS       |
| 2         | Bob   | ECE      |

➡ Violation Reason: DeptName → depends on DeptID, which depends on StudentID → Transitive Dependency

🔸 Boyce-Codd Normal Form (BCNF)
📘 Definition:
A table is in BCNF if:
It is in 3NF
For every non-trivial functional dependency X → Y, X is a super key
Stronger than 3NF

✅ BCNF - Satisfied Example:
| StudentID | CourseID | Instructor |
| --------- | -------- | ---------- |
| 1         | C101     | Dr. Smith  |

➡ Each StudentID-CourseID pair uniquely identifies Instructor

❌ BCNF - Violation Example:
| Course | Instructor | Room |
| ------ | ---------- | ---- |
| Math   | Dr. A      | 101  |
| Math   | Dr. A      | 102  |

➡ FD: Instructor → Course
But Instructor is not a super key → BCNF violation



Summary table:
| Normal Form | Violation Condition                                     | Fix                              |
| ----------- | ------------------------------------------------------- | -------------------------------- |
| 1NF         | Multi-valued attributes                                 | Flatten into atomic values       |
| 2NF         | Partial dependency on part of composite primary key     | Decompose to remove partial deps |
| 3NF         | Transitive dependency                                   | Separate into new tables         |
| BCNF        | Functional dependency where determinant is not superkey | Ensure all FDs have superkeys    |





Denormalisation :
Denormalization is the process of intentionally introducing redundancy into a database by combining tables that were separated during normalization. This is done to improve read performance and reduce the complexity of join operations.


Reason:Reduces the number of joins needed, which speeds up data retrieval,Queries become easier to write and maintain due to fewer relationships.

Indexing:
Indexing is a technique to speed up data retrieval from a database table by creating a separate data structure (index) that allows faster search.


| Feature     | Single-Level Index        | Multi-Level Index                       |
| ----------- | ------------------------- | --------------------------------------- |
| Structure   | One index file            | Hierarchical index files (like B-Trees) |
| Efficiency  | Slower for large datasets | Faster for large datasets               |
| Storage     | Less storage              | More storage due to multiple levels     |
| Access Time | Linear or binary search   | Logarithmic search                      |






